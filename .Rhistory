help.start()
install.packages("swirl")
library(XML)
install.packages("XML")
library(XML)
library(dplyr)
install.packages("dplyr")
library(dplyr)
# Set the working directory
setwd("C:/Users/Brian/OneDrive/DataScience/GettingAndCleaningData/Project")
## You should create one R script called run_analysis.R that does the following.
## 1. Merges the training and the test sets to create one data set.
# Begin with the dataset descriptor files
strFeatures <- "./UCI HAR Dataset/features.txt"
Features <- read.csv(strFeatures, header = FALSE, sep ="")
strSubjectTestPath = "./UCI HAR Dataset/test/subject_test.txt"
SubjectTest = read.csv(strSubjectTestPath)
# Load the test data set
strXTestPath = "./UCI HAR Dataset/test/X_test.txt"
XTest = read.csv(strXTestPath, header = FALSE, sep="")
# Add the names from the features.txt file
names(XTest) <- Features[,2]
strYTestPath = "./UCI HAR Dataset/test/y_test.txt"
YTest = read.csv(strYTestPath, header = FALSE, sep=" ")
strSubjectTrainPath = "./UCI HAR Dataset/train/subject_train.txt"
SubjectTrain = read.csv(strSubjectTrainPath)
## 2. Extracts only the measurements on the mean and standard deviation for each
##    measurement.
## 3. Uses descriptive activity names to name the activities in the data set
## 4. Appropriately labels the data set with descriptive variable names.
## 5. From the data set in step 4, creates a second, independent tidy data set with the
##    average of each variable for each activity and each subject.
View(XTest)
View(XTest)
View(SubjectTrain)
YTest = read.csv(strYTestPath, header = FALSE, sep="")
SubjectTest = read.csv(strSubjectTestPath, header = FALSE, sep="")
library(dplyr)
?join
tt <- join(XTest, YTest)
tt <- arrange(join(XTest, YTest))
library(plyr)
tt <- arrange(join(XTest, YTest))
tt <- join_all(XTest, YTest)
tt <- join_all(list(XTest, YTest))
View(tt)
names(YTest) <- c("TestLabel")
tt <- join_all(list(XTest, YTest))
tail(tt)
head(tt)
head(tt)
tt <- join_all(list(XTest, YTest))
tt <- join(XTest, YTest, type="inner")
tt <- join(XTest, YTest, type="full")
head(tt)
head(YTest)
tt <- c(XTest, YTest)
head(tt)
tt <- c(XTest, YTest[,1])
tt <- rbind(XTest, YTest)
XTest$TestLabel <- YTest[,1]
head(XTest)
# Load the training data set
strXTrainPath = "./UCI HAR Dataset/train/X_train.txt"
XTrain = read.csv(strXTrainPath, header = FALSE, sep="")
XTrain <- read.csv(strXTrainPath, header = FALSE, sep="")
SubjectTrain <- read.csv(strSubjectTrainPath, header = FALSE, sep="")
XTest$Subject <- SubjectTest[,1]
head(XTest)
names(XTrain) <- Features[,2]
head(XTrain)
strYTrainPath <- "./UCI HAR Dataset/train/y_train.txt"
YTain <- read.csv(strYTrainPath, header = FALSE, sep="")
# Append the test labels and subject
XTrain$TestLabel <- YTest[,1]
XTrain$TestLabel <- YTrain[,1]
YTrain <- read.csv(strYTrainPath, header = FALSE, sep="")
# Append the test labels and subject
XTrain$TestLabel <- YTrain[,1]
XTrain$Subject <- SubjectTrain[,1]
head(XTrain)
tt <- full_join(XTest,XTrain)
tt <- c(XTest, XTrain)
# Set the working directory
setwd("C:/Users/Brian/OneDrive/DataScience/GettingAndCleaningData/Project")
## You should create one R script called run_analysis.R that does the following.
## ----------------------------------------------------------------
## 1. Merges the training and the test sets to create one data set.
## ----------------------------------------------------------------
# Begin with the dataset descriptor files
strFeatures <- "./UCI HAR Dataset/features.txt"
Features <- read.csv(strFeatures, header = FALSE, sep ="")
# Read in the the subject files
strSubjectTestPath <- "./UCI HAR Dataset/test/subject_test.txt"
SubjectTest <- read.csv(strSubjectTestPath, header = FALSE, sep="")
# Load the test data set
strXTestPath <- "./UCI HAR Dataset/test/X_test.txt"
XTest <- read.csv(strXTestPath, header = FALSE, sep="")
# Add the names from the features.txt file
names(XTest) <- Features[,2]
# Read in the test labels
strYTestPath <- "./UCI HAR Dataset/test/y_test.txt"
YTest <- read.csv(strYTestPath, header = FALSE, sep="")
# Append the test labels and subject
XTest$TestLabel <- YTest[,1]
XTest$Subject <- SubjectTest[,1]
# Read in the training subject data
strSubjectTrainPath <- "./UCI HAR Dataset/train/subject_train.txt"
SubjectTrain <- read.csv(strSubjectTrainPath, header = FALSE, sep="")
# Load the training data set
strXTrainPath = "./UCI HAR Dataset/train/X_train.txt"
XTrain = read.csv(strXTrainPath, header = FALSE, sep="")
# Add the names from the features.txt file
names(XTrain) <- Features[,2]
# Read in the training labels
strYTrainPath <- "./UCI HAR Dataset/train/y_train.txt"
YTrain <- read.csv(strYTrainPath, header = FALSE, sep="")
# Append the test labels and subject
XTrain$TestLabel <- YTrain[,1]
XTrain$Subject <- SubjectTrain[,1]
## 2. Extracts only the measurements on the mean and standard deviation for each
##    measurement.
## 3. Uses descriptive activity names to name the activities in the data set
## 4. Appropriately labels the data set with descriptive variable names.
## 5. From the data set in step 4, creates a second, independent tidy data set with the
##    average of each variable for each activity and each subject.
TotalData <- rbind(XTest, XTrain)
grep(names(TotalData), "mean")
grep(names("mean", TotalData))
?grep
names(TotalData)
grep("mean",names(TotalData))
MeanData <- c(grep("mean",names(TotalData)))
MeanData <- TotalData[,(grep("mean",names(TotalData)))]
names(MeanData)
names(TotalData)
MeanData <- TotalData[,(grep("mean()",names(TotalData)))]
STDData <- TotalData[,(grep("std()",names(TotalData)))]
View(YTest)
View(YTest)
strActLabels <- "./UCI HAR Dataset/activity_labels.txt"
ActLabels <- read.csv(strActLabels, header = FALSE, sep ="")
Features <- read.csv(strFeatures, header = FALSE, sep ="", factor = FALSE)
# Begin with the dataset descriptor files
strFeatures <- "./UCI HAR Dataset/features.txt"
Features <- read.csv(strFeatures, header = FALSE, sep ="", factor = FALSE)
?read.csv
Features <- read.csv(strFeatures, header = FALSE, sep ="", stringsAsFactors = FALSE)
ActLabels <- read.csv(strActLabels, header = FALSE, sep ="", stringsAsFactors = FALSE)
names(MeanData)
tt <- MeanData
tt <- STDData
MeanData <- TotalData[,!(grep("mean()",names(TotalData)))]
MeanData <- TotalData[,(grep("mean()",names(TotalData)))]
MeanData <- TotalData[,names(TotalData) %in% "mean()"]
MeanData <- TotalData[,names(TotalData) %in% "mean()"]
MeanData <- TotalData[,(names(TotalData) %in% "mean()")]
MeanData <- TotalData[,!(names(TotalData) %in% "mean()")]
MeanData <- TotalData[,(grep("mean()",names(TotalData)))]
STDData <- TotalData[,(grep("std()",names(TotalData)))]
?grep
strSearch = c("mean()", "std()")
MeanData <- TotalData[,(grep(strSearch,names(TotalData)))]
?grep2
?cbind
cbind(MeanData, STDData)
SpecData <- cbind(MeanData, STDData)
SpecData <- cbind(MeanData, STDData, TotalData$TestLabel, TotalData$Subject)
setwd("C:/Users/Brian/OneDrive/DataScience/GettingAndCleaningData/Project")
## You should create one R script called run_analysis.R that does the following.
## ----------------------------------------------------------------
## 1. Merges the training and the test sets to create one data set.
## ----------------------------------------------------------------
# Begin with the dataset descriptor files
strFeatures <- "./UCI HAR Dataset/features.txt"
Features <- read.csv(strFeatures, header = FALSE, sep ="", stringsAsFactors = FALSE)
# Read in the activity labels
strActLabels <- "./UCI HAR Dataset/activity_labels.txt"
ActLabels <- read.csv(strActLabels, header = FALSE, sep ="", stringsAsFactors = FALSE)
# Read in the the test subject files
strSubjectTestPath <- "./UCI HAR Dataset/test/subject_test.txt"
SubjectTest <- read.csv(strSubjectTestPath, header = FALSE, sep="")
# Load the test data set
strXTestPath <- "./UCI HAR Dataset/test/X_test.txt"
XTest <- read.csv(strXTestPath, header = FALSE, sep="")
# Add the names from the features.txt file
names(XTest) <- Features[,2]
# Read in the test labels
strYTestPath <- "./UCI HAR Dataset/test/y_test.txt"
YTest <- read.csv(strYTestPath, header = FALSE, sep="")
# Set the working directory
setwd("C:/Users/Brian/OneDrive/DataScience/GettingAndCleaningData/Project")
## You should create one R script called run_analysis.R that does the following.
## ----------------------------------------------------------------
## 1. Merges the training and the test sets to create one data set.
## ----------------------------------------------------------------
# Begin with the dataset descriptor files
strFeatures <- "./UCI HAR Dataset/features.txt"
Features <- read.csv(strFeatures, header = FALSE, sep ="", stringsAsFactors = FALSE)
# Read in the activity labels
strActLabels <- "./UCI HAR Dataset/activity_labels.txt"
ActLabels <- read.csv(strActLabels, header = FALSE, sep ="", stringsAsFactors = FALSE)
# Read in the the test subject files
strSubjectTestPath <- "./UCI HAR Dataset/test/subject_test.txt"
SubjectTest <- read.csv(strSubjectTestPath, header = FALSE, sep="")
# Load the test data set
strXTestPath <- "./UCI HAR Dataset/test/X_test.txt"
XTest <- read.csv(strXTestPath, header = FALSE, sep="")
# Add the names from the features.txt file
names(XTest) <- Features[,2]
# Read in the test labels
strYTestPath <- "./UCI HAR Dataset/test/y_test.txt"
YTest <- read.csv(strYTestPath, header = FALSE, sep="")
# Append the test labels and subject
XTest$ActivityLabel <- YTest[,1]
XTest$Subject <- SubjectTest[,1]
# Read in the training subject data
strSubjectTrainPath <- "./UCI HAR Dataset/train/subject_train.txt"
SubjectTrain <- read.csv(strSubjectTrainPath, header = FALSE, sep="")
# Load the training data set
strXTrainPath = "./UCI HAR Dataset/train/X_train.txt"
XTrain = read.csv(strXTrainPath, header = FALSE, sep="")
# Add the names from the features.txt file
names(XTrain) <- Features[,2]
# Read in the training labels
strYTrainPath <- "./UCI HAR Dataset/train/y_train.txt"
YTrain <- read.csv(strYTrainPath, header = FALSE, sep="")
# Append the test labels and subject
XTrain$ActivityLabel <- YTrain[,1]
XTrain$Subject <- SubjectTrain[,1]
# Finally, bind the two data sets
TotalData <- rbind(XTest, XTrain)
## ----------------------------------------------------------------
## 2. Extracts only the measurements on the mean and standard deviation for each
##    measurement.
## ----------------------------------------------------------------
MeanData <- TotalData[,(grep("mean()",names(TotalData)))]
STDData <- TotalData[,(grep("std()",names(TotalData)))]
SpecData <- cbind(MeanData, STDData, TotalData$TestLabel, TotalData$Subject)
## 3. Uses descriptive activity names to name the activities in the data set
## 4. Appropriately labels the data set with descriptive variable names.
## 5. From the data set in step 4, creates a second, independent tidy data set with the
##    average of each variable for each activity and each subject.
SpecData <- cbind(MeanData, STDData, TotalData$ActivityLabel, TotalData$Subject)
TotalData[,(grep("mean()",names(TotalData))
STDData <- TotalData[,(grep("std()",names(TotalData)))]
Data <- cbind(MeanData, STDData,
TotalData$ActivityLabel, TotalData$Subject)
tt <- Data[,1;5]
tt <- Data[,1:50]
tt
tt <- Data[1:50,]
tt
ActLabels
names(ActLabels) <- c("ActivityLabel", "ActivityText")
ActLabels
merge(tt,ActLabels)
View(tt)
View(tt)
tt2 <- merge(tt,ActLabels)
View(tt2)
View(tt2)
?merge
mergedData <- merge(tt,ActLabels, by.x = "ActivityLabel", by.y="ActivityLabel", all=TRUE)
mergedData <- merge(tt,ActLabels, all=TRUE)
library(plyr)
arrange(join(tt,ActLabels),ActivityLabel)
mergedData <- arrange(join(tt,ActLabels),ActivityLabel)
View(mergedData)
mergedData <- merge(tt,ActLabels, by.x = "TotalData$ActivityLabel", by.y="ActivityLabel", all=TRUE)
mergedData <- merge(Data,ActLabels, by.x = "TotalData$ActivityLabel", by.y="ActivityLabel", all=TRUE)
library(dplyr)
mergedData <- rename(mergedData, ActivityID = TotalData$ActivityLabel)
mergedData <- rename(mergedData, ActivityID = TotalData$ActivityLabel)
names(mergedData)
mergedData <- rename(mergedData, ActivityID = TotalData$ActivityLabel)
library(dplyr)
mergedData <- rename(mergedData, ActivityID = TotalData$ActivityLabel)
mergedData <- rename(mergedData, ActivityID = ActivityText)
?rename
detach("package:plyr", unload = TRUE)
mergedData <- rename(mergedData, ActivityID = ActivityText)
mergedData <- rename(mergedData, ActivityID = TotalData$ActivityLabel)
# Set the working directory
setwd("C:/Users/Brian/OneDrive/DataScience/GettingAndCleaningData/Project")
## You should create one R script called run_analysis.R that does the following.
## ----------------------------------------------------------------
## 1. Merges the training and the test sets to create one data set.
## ----------------------------------------------------------------
# Begin with the dataset descriptor files
strFeatures <- "./UCI HAR Dataset/features.txt"
Features <- read.csv(strFeatures, header = FALSE, sep ="", stringsAsFactors = FALSE)
# Read in the activity labels
strActLabels <- "./UCI HAR Dataset/activity_labels.txt"
ActLabels <- read.csv(strActLabels, header = FALSE, sep ="", stringsAsFactors = FALSE)
names(ActLabels) <- c("ActivityLabel", "ActivityText")
# Read in the the test subject files
strSubjectTestPath <- "./UCI HAR Dataset/test/subject_test.txt"
SubjectTest <- read.csv(strSubjectTestPath, header = FALSE, sep="")
# Load the test data set
strXTestPath <- "./UCI HAR Dataset/test/X_test.txt"
XTest <- read.csv(strXTestPath, header = FALSE, sep="")
# Add the names from the features.txt file
names(XTest) <- Features[,2]
# Read in the test labels
strYTestPath <- "./UCI HAR Dataset/test/y_test.txt"
YTest <- read.csv(strYTestPath, header = FALSE, sep="")
# Append the test labels and subject
XTest$ActivityLabel <- YTest[,1]
XTest$Subject <- SubjectTest[,1]
# Read in the training subject data
strSubjectTrainPath <- "./UCI HAR Dataset/train/subject_train.txt"
SubjectTrain <- read.csv(strSubjectTrainPath, header = FALSE, sep="")
# Load the training data set
strXTrainPath = "./UCI HAR Dataset/train/X_train.txt"
XTrain = read.csv(strXTrainPath, header = FALSE, sep="")
# Add the names from the features.txt file
names(XTrain) <- Features[,2]
# Read in the training labels
strYTrainPath <- "./UCI HAR Dataset/train/y_train.txt"
YTrain <- read.csv(strYTrainPath, header = FALSE, sep="")
# Append the test labels and subject
XTrain$ActivityLabel <- YTrain[,1]
XTrain$Subject <- SubjectTrain[,1]
# Finally, bind the two data sets
TotalData <- rbind(XTest, XTrain)
## ----------------------------------------------------------------
## 2. Extracts only the measurements on the mean and standard
## deviation for each measurement.
## ----------------------------------------------------------------
# This is somewhat inefficient, but it makes it easy to see what
# data was selected.
MeanData <- TotalData[,(grep("mean()",names(TotalData)))]
STDData <- TotalData[,(grep("std()",names(TotalData)))]
Data <- cbind(MeanData, STDData,
TotalData$ActivityLabel, TotalData$Subject)
## ----------------------------------------------------------------
## 3. Uses descriptive activity names to name the activities in the
## data set
## ----------------------------------------------------------------
mergedData <- merge(Data,ActLabels,
by.x = "TotalData$ActivityLabel", by.y="ActivityLabel",
all=TRUE)
## ----------------------------------------------------------------
## 4. Appropriately labels the data set with descriptive variable
## names.
## ----------------------------------------------------------------
library(dplyr)
mergedData <- rename(mergedData, ActivityID = TotalData$ActivityLabel)
## ----------------------------------------------------------------
## 5. From the data set in step 4, creates a second, independent
## tidy data set with the average of each variable for each
## activity and each subject.
## ----------------------------------------------------------------
mergedData <- rename(mergedData, ActivityID = TotalData$ActivityLabel)
names(mergedData)
mergedData <- rename(mergedData, Subject = TotalData$Subject)
mergedData <- rename(mergedData, ActivityID = 'TotalData$ActivityLabel')
mergedData <- dplyr::rename(mergedData, ActivityID = 'TotalData$ActivityLabel')
mergedData <- dplyr::rename(mergedData, ActivityID = `TotalData$ActivityLabel`)
names(mergedData)
mergedData <- dplyr::rename(mergedData, Subject = `TotalData$Subject`)
names(mergedData)
tapply(mergedData$`tBodyAcc-mean()-X`,mergedData$ActivityID,average)
tapply(mergedData$`tBodyAcc-mean()-X`,mergedData$ActivityID,sum)
tapply(mergedData$`tBodyAcc-mean()-X`,mergedData$ActivityID,mean)
tapply(mergedData$`tBodyAcc-mean()-X`,mergedData$ActivityText,mean)
?tapply
tapply(1:3,mergedData$ActivityText,mean)
tapply(mergedData$`tBodyAcc-mean()-X`,mergedData$ActivityText,mean)
>dcast
?dcast
library(reshape2)
?dcast
tt <- tidied <- dcast(mergedData, tBodyAcc-mean()-X)
tt <- tidied <- dcast(mergedData, `tBodyAcc-mean()-X`,max)
?mutate
tapply(mergedData,mergedData$ActivityText,mean)
mergedData %>% group_by(ActivityText) %>% summarise_each(funs(mean()))
mergedData %>% group_by(ActivityText) %>% summarise_each(funs(mean))
mergedData %>% group_by(ActivityText, Subject) %>% summarise_each(funs(mean))
tidyData <- mergedData %>% group_by(ActivityText, Subject) %>% summarise_each(funs(mean))
head(tidyData)
View(tidyData)
View(tidyData)
write.table(tidyData)
?write.table
write.table(tidyData, "TidyData.txt")
